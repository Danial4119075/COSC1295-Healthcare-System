plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group = 'healthcare'
version = '1.0'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    // JavaFX
    implementation 'org.openjfx:javafx-controls:17.0.2'
    implementation 'org.openjfx:javafx-fxml:17.0.2'

    // SQLite JDBC
    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'

    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = 'healthcare.gui.MainApplication'

    // --- IMPORTANT ---
    // This makes right-click â†’ Run MainApplication work in IntelliJ (non-Gradle run)
    // by telling the JVM to load JavaFX modules that are already on the classpath.
    // IntelliJ adds your Gradle dependencies to the classpath, and these flags
    // ensure JavaFX is activated even when not launched via the Gradle 'run' task.
    applicationDefaultJvmArgs = [
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

test {
    useJUnitPlatform()
}

// Task to run the application (Gradle -> application -> run still works)
tasks.register('runApp', JavaExec) {
    group = 'application'
    description = 'Run the Healthcare System application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('healthcare.gui.MainApplication')

    // Ensure JavaFX modules are enabled at runtime for the Gradle run task
    jvmArgs '--add-modules', 'javafx.controls,javafx.fxml'
}

// Task to run tests
tasks.register('testAll', Test) {
    group = 'verification'
    description = 'Run all unit tests'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Handle duplicate resources gracefully
tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Create executable (fat) JAR
jar {
    manifest {
        attributes(
                'Main-Class': 'healthcare.gui.MainApplication',
                'Implementation-Title': 'Healthcare System',
                'Implementation-Version': archiveVersion
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
